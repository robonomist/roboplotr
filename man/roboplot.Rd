% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plots.R
\name{roboplot}
\alias{roboplot}
\title{Automated plotly plotting for properly scaling plots.}
\usage{
roboplot(
  d,
  color = NULL,
  title = NULL,
  subtitle = "",
  caption = NULL,
  legend_orientation = NULL,
  legend_position = NULL,
  trace_color = NULL,
  highlight = NULL,
  zeroline = F,
  rangeslider = FALSE,
  pattern = NULL,
  line_width = getOption("roboplot.linewidth"),
  hovertext = NULL,
  plot_type = "scatter",
  plot_mode = NULL,
  plot_axes = set_axes(),
  height = getOption("roboplot.height"),
  facet_split = NULL,
  legend_maxwidth = NULL,
  xaxis_ceiling = getOption("roboplot.xaxis.ceiling"),
  secondary_yaxis = NULL,
  width = getOption("roboplot.width"),
  legend_title = F,
  artefacts = getOption("roboplot.artefacts")$auto,
  container = getOption("roboplot.shinyapp")$container,
  ...
)
}
\arguments{
\item{d}{Data frame. Data to be plotted with at least the columns "time" (Date or POSIXt) and "value" (numeric). Other columns could be specified instead with 'plot_axes', using \code{\link[=set_axes]{set_axes()}}.}

\item{color}{Symbol, string, or function resulting in symbol or string. Variable from argument 'd' to use for trace color. If left NULL, the argument 'subtitle' will be used as a placeholder for determining color and hoverlabels.}

\item{title, subtitle}{Characters. Labels for plot elements. Optionally, use \code{\link[=set_title]{set_title()}} for the title if you want to omit the title from the displayed plot, but include it for any downloads through the modebar.}

\item{caption}{Function or character. Use \code{\link[=set_caption]{set_caption()}}.}

\item{legend_position, legend_orientation}{Characters. Currently only legend_position is used, and takes only "bottom" or NA for no legend. Legend is removed on default if the argument 'color' in argument 'd' has only one observation.}

\item{trace_color}{Character vector, named if length > 1. Trace colors for all traces. Determines the trace type for either the whole plot, or for all variables defined by color as name-value pairs.}

\item{highlight}{Double or list. Determines if a given trace is included in legend and assigned a color.
If double, traces with max(value) < highlight will be give trace color matching the grid color, and removed from the legend.
If function, it must return a logical and include named items "value" and ".fun", where .fun checks if given value will get a color or legend item.
Will not currently work with multiple patterns.}

\item{zeroline}{Logical or double. Determines zeroline inclusion, TRUE for zeroline, or double for exact placement.}

\item{rangeslider}{Logical or character in \%Y-\%m-\%d format. Determines rangeslider inclusion. TRUE includes the rangeslider, a character string includes the rangeslider with the given date as a start date.}

\item{pattern}{Symbol, string, or function resulting in symbol or string. Variable from argument 'd' to use for scatter plot linetype or bar plot pattern. Not supported for pie charts.}

\item{line_width}{Double vector, named if length > 1. Line width for all line traces. Determines the line width for either the whole plot, or for all variables defined by color as name-value pairs.}

\item{hovertext}{Function. Use \code{\link[=set_hovertext]{set_hovertext()}}.}

\item{plot_type}{Character vector, named if length > 1. Determines the trace type for either the whole plot, or for all variables defined by color as name-value pairs.}

\item{plot_mode}{Character vector, named if length > 1. Controls plot specifics along with the parameter 'plot_type'. When 'plot_type' is "scatter", the available modes are "line" "scatter", "smooth", "step" and "scatter+line".
When 'plot_type' is "bar", the available modes are "dodge" "stack", "horizontal" and "horizontalfill". Mode of "horizontalfill" makes bars fill the space available is observations are missing. When 'plot_type' is "pie", the available modes are "normal" and "rotated".
You can give a single unnamed 'plot_mode' which is used as applicable, or name-value pairs, where names are items from parameter 'd' column described by parameter 'color', and values applicable plot modes listed above.}

\item{plot_axes}{Function. Function. Use \code{\link[=set_axes]{set_axes()}}.}

\item{height, width}{Double. Height and width of the plot. Default width is NULL for responsive plots, give a value for static plot width.}

\item{facet_split}{Currently unused. Variable from argument 'd' to use for facet splits.}

\item{legend_maxwidth}{Double. Legend items (and y-axis values for horizontal barplots) longer than this will be collapsed with an ellipsis (Double).}

\item{xaxis_ceiling}{Character. One of "default", "days", "months", "weeks", "quarters", "years", or "guess"). How to round the upper bound of plot x-axis for other than bar plots if no axis limits are given.}

\item{secondary_yaxis}{Symbol, string, or function resulting in symbol or string. Variable from argument 'd' resulting in a maximum of two factor levels, determining which observations if any use a secondary y-axis.
Parameter 'zeroline' will be ignored. Cannot currently differentiate between the axes in legend, and right margin will not scale properly on zoom and possibly on image files downloaded through modebar.}

\item{legend_title}{Logical or character. Use TRUE if you want the parameter 'color' to be the legend title. Use a character string if you want to provide your own legend title.}

\item{artefacts}{Logical or function. Use \code{\link[=set_artefacts]{set_artefacts()}} for fine-tuned control. Use TRUE instead for automated artefact creation or html and/or other files from the plot based on settings globally set by \code{\link[=set_roboplot_options]{set_roboplot_options()}}.}

\item{container}{Character. Experimental, might not work as intended. Use only with shiny apps. A css selector for the element in a shiny app where this \code{\link[=roboplot]{roboplot()}} will be contained in. Used for relayouts if the plot is rendered while the container is not displayed.}

\item{...}{Placeholder for other parameters.}
}
\value{
A list of classes "plotly" and "html"
}
\description{
Wrapper for \link[plotly:plot_ly]{plotly::plot_ly} for shorthand declaration of many layout and trace arguments.
Ensures proper scaling or elements when used in shiny apps, iframes, static image downloads and so on.
}
\examples{
# The default use for roboplotr::roboplot is for line charts. Providing
# a title is mandatory, subtitle and color is optional but  very likely
# necessary.

d <- energiantuonti |>
  dplyr::filter(Alue \%in\% c("Kanada","Norja","Yhdistynyt kuningaskunta"))
d1 <- d |> dplyr::filter(Suunta == "Tuonti")
d1 |> roboplot(color = Alue,
               title = "Energian tuonti",
               subtitle = "Milj. \u20AC",
               caption = "LÃ¤hde: Tilastokeskus.")


# Legend will automatically be omitted if only a single observation exists
# for 'color' is unless legend_position is given (currently only "bottom"
# works). Caption may be further specified with the helper function
# roboplotr::set_caption (see documentation for more control).
d1 |>
  dplyr::filter(Alue == "Yhdistynyt kuningaskunta") |>
  roboplot(Alue,"Energian tuonti Yhdistyneest\uE4 kuningaskunnasta","Milj. \u20AC",
           caption = set_caption(text = "Tilastokeskus",
                                          updated = TRUE,
                                          .data = d1
           )
  )


# You can also use set_roboplot_options() to preconstruct some caption texts.

set_roboplot_options(
  caption_template = "{prepend}.<br>Source: {caption}.<br>{append}.")

d |>
  roboplot(Alue, "Energy import","Million euros",
           caption = set_caption(
             prepend ="Canada",
             caption = "Statistics Finland",
             append = paste0("(Customs Finland, International trade ",
                             "statistics;<br>Radiation and Nuclear Safety ",
                             "Authority; Gasum LLC)")))

# Reset to defaults
set_roboplot_options(reset = TRUE)

# Legend can also be omitted by giving a legend_position of NA. Height and
# width can also be specified, while for most uses width specification is
# unnecessary, as roboplotr is designed for plots with responsive widths.
d1 |> roboplot(Alue,"Energian tuonti","Milj. \u20AC","Tilastokeskus",
               legend_position = NA,
               height = 600,
               width = 400
)

# Pattern can be used in addition to color and you can control the ordering of
# the traces by transforming your variables to factors. You can also let
# roboplotr guess how much space is given to yaxis end in line plots, or give a
# string such as "weeks" or "days" to it. Message about missing frequency data
# can be silenced  by setting the information as an attribute of the used data.
d2 <- d |> dplyr::mutate(Alue = forcats::fct_reorder(Alue, value))
attr(d2, "frequency") <- "Quarterly"
d2 |> roboplot(Alue,"Energian tuonti ja vienti","Milj. \u20AC","Tilastokeskus",
               pattern = Suunta,
               xaxis_ceiling = "guess")

# Bar plots use a pattern too
d2 |> roboplot(Alue,"Energian tuonti ja vienti","Milj. \u20AC","Tilastokeskus",
               pattern = Suunta,
               plot_type = "bar")

# Scatter plots and bar plot may be combined, and colors determined by
# trace by giving named character vectors as the appropriate arguments.
# Barmode or scatter type is controlled by plot_mode.
d1 |> roboplot(Alue,"Energian tuonti ja vienti","Milj. \u20AC","Tilastokeskus",
             trace_color =  c("Kanada" = "red","Norja" = "blue", .other = "black"),
             plot_type = c("Norja" = "scatter","Kanada" = "bar",".other" = "scatter"),
             plot_mode = c("Yhdistynyt kuningaskunta" = "scatter",
                           "Norja" = "scatter+line"
             ))


# With single 'time' observation x-axis tickmarks lose tick labels and
# hovertemplate loses the time information. There are several places where
# this information fits nicely.
d3 <- d2 |> dplyr::filter(time == max(time))
d3 |>
  roboplot(Alue,
           glue::glue("Energian tuonti ja vienti vuonna {lubridate::year(max(d3$time))}"),
           glue::glue("Milj. \u20AC ({lubridate::year(max(d3$time))})"),
           pattern = Suunta,
           plot_type = "bar",
           caption = set_caption(text = "Tilastokeskus.\ÅTieto vuodelta {lubridate::year(max(d3$time))}",
           ))

# Plot axis can be controlled with roboplotr::set_axes (see
# documentation for more examples).
d2 |>
  dplyr::filter(Suunta == "Tuonti") |>
  roboplot(Alue, "Energian tuonti","Milj. \u20AC","Tilastokeskus",
           plot_axes = set_axes(
             ytitle = "Arvo",
             xformat = "Vuonna \%Y",
             ylim = c(-100,100))
  )

# Bar plot can be horizontal with plot axis control and 'plot_mode' set to
# horizontal but then is better off with only a single 'time' observation. Long
# legend items and axis labels can be cut off with 'legend_maxwidth', while
# still showing the proper labels on hover.
d3 |>
  dplyr::mutate(Suunta = paste0(Suunta, " m\uE4\uE4r\uE4maittain")) |>
  roboplot(Suunta,
           glue::glue("Energian tuonti {lubridate::year(max(d$time))}"),
           "Milj. \u20AC","Tilastokeskus",
           plot_type = "bar",
           legend_maxwidth = 12,
           plot_mode = "horizontal",
           plot_axes = set_axes(
             y = "Alue",
             yticktype = "character",
             x = "value",
             xticktype = "numeric")
  )

# If you want the bars to fill the available space in a horizontal bar chart,
# use the plot_mode of "horizontalfill" instead of "horizontal".
d3 |>
  dplyr::mutate(Suunta = paste0(Suunta, " m\uE4\uE4r\uE4maittain")) |>
  roboplot(Suunta,
           glue::glue("Energian tuonti {lubridate::year(max(d$time))}"),
           "Milj. \u20AC","Tilastokeskus",
           plot_type = "bar",
           legend_maxwidth = 12,
           plot_mode = "horizontalfill",
           plot_axes = set_axes(
             y = "Alue",
             yticktype = "character",
             x = "value",
             xticktype = "numeric")
  )

# Pie plots are possible too, but pattern is currently ignored by plotly library.
d3 |> roboplot(Alue,"Energian tuonti ja vienti","Milj. \u20AC","Tilastokeskus",
               pattern = Suunta,
               plot_type = "pie")

# Pie plot can be centered to the first factor level of argument 'color' with
# with plot_mode "rotated".
d3 |> roboplot(Alue,"Energian tuonti ja vienti","Milj. \u20AC",
                    "Tilastokeskus",
                    plot_type = "pie",
                    plot_mode = "rotated")

# You can give a highlight value if you don't have a pattern. Any trace with a
# "value" equal or higher than the given value will get colors as normal. Others
# get assigned a bacground grid color and no legend entry. Useful mostly with
# very large amounts of traces.

d2 |>
  dplyr::filter(Suunta == "Tuonti") |>
  roboplot(Alue, "Energian tuonti","Milj. \u20AC","Tilastokeskus",
           plot_type = "scatter",
           highlight = 160)

# This works best with line plots, but can be included in other plots, too -
# with varying results, these are work in progress. Highlight can also be a list
# with "value" and ".fun" used to determine which traces are highlighted. The
# default usage is essentially list(value = highlight, .fun = sum).
d2 |> dplyr::filter(Suunta == "Tuonti") |>
  roboplot(Alue, "Energian tuonti","Milj. \u20AC","Tilastokeskus",
           plot_type = "bar",
           highlight = list(value = 22, .fun = mean))

# Rangeslider can be added as TRUE or FALSE, or as character in date format of
# \%Y-\%m-\%d, in which case the given date will control where the rangeslider is
# initially set. Zeroline can be controlled in a similar way.
d2 |> dplyr::filter(Suunta == "Tuonti") |>
  roboplot(Alue, "Energian tuonti","Milj. \u20AC","Tilastokeskus",
           rangeslider = "2014-01-01",
           zeroline = 128)

# Secondary yaxis can be added to line plots when the corresponding variable
# only has two unique observations that is a subset of the variable 'color'.
# There is currently no way of differentiating between the axes in legend.
# Zeroline will not behave as expected, but will instead refer to right yaxis.
d2 |>
  dplyr::filter(Suunta == "Tuonti") |>
  dplyr::mutate(sec_axis = ifelse(Alue == "Norja","Norja","Muu")) |>
  roboplot(Alue, "Energian tuonti","Milj. \u20AC","Tilastokeskus",
           plot_type = c("Norja" = "bar", ".other" = "scatter"),
           secondary_yaxis = sec_axis,
           zeroline = NA)

# Finally, you may get html or other files from the plots you create either
# by using roboplotr::roboplot_create_artefacts() or simply using the
# parameter 'artefacts' here. The global defaults or artefact creation are
# set with roboplotr::set_roboplot_options(), and for this example the
# default filepath will be changed to a temporary directory.

set_roboplot_options(
  artefacts = set_artefacts(filepath = tempdir())
)

d2 |>
  dplyr::filter(Suunta == "Tuonti") |>
  roboplot(Alue,"Energian tuonti","Milj. \u20AC","Tilastokeskus",
  artefacts = TRUE)

file.exists(paste0(tempdir(),"/energian_tuonti.html"))

# Reset to defaults

set_roboplot_options(reset = TRUE)

# Further specifications for creating artefacts is defined under
# roboplotr::set_roboplot_options(), roboplotr::roboplot_create_widgets() and
# roboplotr::set_artefacts()

# Using "container" is defined under roboplotr::set_roboplot_options() under
# as its usage is tied to using the 'shinyapp' parameter therein.
}
